const express = require("express");
const bodyParser = require("body-parser");

const app = express();

// Middleware to parse URL-encoded bodies (as sent by HTML forms)
app.use(bodyParser.urlencoded({ extended: false }));

// Middleware for handling GET requests to /add-product
app.use("/add-product", (req, res, next) => {
  res.send(`<form action="/product" method="POST">
              <input type="text" name="title">
              <button type="submit">Submit</button>
            </form>
    `); // Sends a form for adding a product
});

// Middleware for handling POST requests to /product
app.use("/product", (req, res, next) => {
  console.log(req.body); // Logs the parsed body of the POST request
  res.redirect("/"); // Redirects to the root URL
});

// Middleware for handling requests to the root URL
app.use("/", (req, res, next) => {
  res.send("<h1>Hello from Express!</h1>"); // Sends a response for the root URL
});

// Start the server and listen on port 3000
app.listen(3000);

/*
Additional Explanation:
- Added the `body-parser` middleware to parse URL-encoded data from incoming requests (typically from form submissions).
  - `app.use(bodyParser.urlencoded({ extended: false }));` sets up the body-parser middleware to handle form data.
  - `bodyParser.urlencoded()` is a built-in middleware function in Express that parses incoming requests with URL-encoded payloads. URL-encoded payloads are typically generated by HTML forms with the `application/x-www-form-urlencoded` content type.
  - The `extended` option within `urlencoded` can be set to `true` or `false`:
    - When `extended: false`, the querystring library is used to parse the URL-encoded data, which can handle only simple data structures (i.e., key-value pairs).
    - When `extended: true`, the qs library is used for parsing, which supports richer objects and arrays.
  - Once `bodyParser.urlencoded` middleware is applied, it intercepts all incoming requests with URL-encoded bodies and parses them into a JavaScript object, which is then attached to the `req.body` property. This allows you to easily access form data within your route handlers.
- Modified the `/add-product` route to serve an HTML form that submits a POST request to `/product`.
- Added a new middleware for the `/product` route to handle POST requests. This middleware logs the request body (the submitted form data) and then redirects the client to the root URL.
- The root URL middleware remains unchanged, sending an HTML response with "Hello from Express!".
- This setup demonstrates handling form submissions in Express, including parsing form data and redirecting after processing.
*/
